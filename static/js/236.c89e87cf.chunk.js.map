{"version":3,"file":"static/js/236.c89e87cf.chunk.js","mappings":"2SAaaA,EAAe,WAC1B,IAAMC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAAC,KAAD,CAAQC,EAAE,OAAOC,EAAG,EAApB,UACE,SAAC,KAAD,CACEC,cAAe,CAAEC,SAAU,GAAIC,MAAO,GAAIC,SAAU,IACpDC,iBAAkBC,EAAAA,GAAW,CAC3BJ,SAAUI,EAAAA,KAAaC,SAAS,YAChCH,SAAUE,EAAAA,KACPE,IAAI,EAAG,gCACPD,SAAS,YACZJ,MAAOG,EAAAA,KACJH,MAAM,yBACNI,SAAS,cAEdE,SAAU,cAAuD,IAApDP,EAAmD,EAAnDA,SAAUC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,SAAcM,EAAoB,EAApBA,cAC1CC,YAAW,WACTd,GAASe,EAAAA,EAAAA,IAAa,CAAEC,KAAMX,EAAUC,MAAAA,EAAOC,SAAAA,KAC/CM,GAAc,EACf,GAAE,IACJ,EAhBH,UAkBE,UAAC,KAAD,YACE,SAAC,KAAD,CAAOG,KAAK,WAAZ,SACG,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACC,UAAC,KAAD,CAAaC,UAAWD,EAAKE,OAAOJ,MAAQE,EAAKG,QAAQL,KAAzD,WACE,SAAC,KAAD,CAAWM,GAAI,EAAf,wBACA,SAAC,MAAD,kBACML,GADN,IAEEM,YAAY,SACZC,MAAM,QACNC,KAAK,OACLC,iBAAiB,QACjBC,aAAa,QAEf,SAAC,KAAD,UAAmBT,EAAKE,OAAOJ,SAXlC,KAeH,SAAC,KAAD,CAAOA,KAAK,QAAZ,SACG,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACC,UAAC,KAAD,CAAaC,UAAWD,EAAKE,OAAOd,OAASY,EAAKG,QAAQf,MAA1D,WACE,SAAC,KAAD,CAAWsB,GAAI,EAAGN,GAAI,EAAtB,oBAGA,SAAC,MAAD,kBACML,GADN,IAEEM,YAAY,oBACZC,MAAM,QACNC,KAAK,QACLC,iBAAiB,QACjBC,aAAa,QAEf,SAAC,KAAD,UAAmBT,EAAKE,OAAOd,UAblC,KAiBH,SAAC,KAAD,CAAOU,KAAK,WAAZ,SACG,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACC,UAAC,KAAD,CACEC,UAAWD,EAAKE,OAAOb,UAAYW,EAAKG,QAAQd,SADlD,WAGE,SAAC,KAAD,CAAWqB,GAAI,EAAGN,GAAI,EAAtB,uBAGA,SAAC,MAAD,kBACML,GADN,IAEEO,MAAM,QACNC,KAAK,WACLC,iBAAiB,QACjBC,aAAa,QAEf,SAAC,KAAD,UAAmBT,EAAKE,OAAOb,aAdlC,KAkBH,SAAC,KAAD,CACEqB,GAAG,OACHD,aAAa,IACbE,GAAG,cACHC,KAAK,KACLC,OAAO,oBACPC,OAAQ,CAAEH,GAAI,UAAWI,MAAO,SAChCC,QAAS,CACPL,GAAI,UACJM,UAAW,eAEbV,KAAK,SAXP,4BAmBT,EC1Gc,SAASW,IACtB,OACE,4BACE,SAAC,KAAD,WACE,+CAEF,SAACrC,EAAD,MAGL,C","sources":["components/RegisterForm/RegisterForm.jsx","pages/Register.jsx"],"sourcesContent":["import { registration } from 'components/redux/auth/operations';\nimport { useDispatch } from 'react-redux';\nimport {\n  Center,\n  FormControl,\n  FormLabel,\n  Input,\n  FormErrorMessage,\n  Button,\n} from '@chakra-ui/react';\nimport { Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup';\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <Center w=\"100%\" p={4}>\n      <Formik\n        initialValues={{ userName: '', email: '', password: '' }}\n        validationSchema={Yup.object({\n          userName: Yup.string().required('Required'),\n          password: Yup.string()\n            .min(6, 'Must be 6 characters or more')\n            .required('Required'),\n          email: Yup.string()\n            .email('Invalid email address')\n            .required('Required'),\n        })}\n        onSubmit={({ userName, email, password }, { setSubmitting }) => {\n          setTimeout(() => {\n            dispatch(registration({ name: userName, email, password }));\n            setSubmitting(false);\n          }, 400);\n        }}\n      >\n        <Form>\n          <Field name=\"userName\">\n            {({ field, form }) => (\n              <FormControl isInvalid={form.errors.name && form.touched.name}>\n                <FormLabel mb={2}>User Name</FormLabel>\n                <Input\n                  {...field}\n                  placeholder=\"Person\"\n                  width=\"300px\"\n                  type=\"text\"\n                  focusBorderColor=\"black\"\n                  borderRadius=\"0\"\n                />\n                <FormErrorMessage>{form.errors.name}</FormErrorMessage>\n              </FormControl>\n            )}\n          </Field>\n          <Field name=\"email\">\n            {({ field, form }) => (\n              <FormControl isInvalid={form.errors.email && form.touched.email}>\n                <FormLabel mt={3} mb={2}>\n                  Email\n                </FormLabel>\n                <Input\n                  {...field}\n                  placeholder=\"example@email.com\"\n                  width=\"300px\"\n                  type=\"email\"\n                  focusBorderColor=\"black\"\n                  borderRadius=\"0\"\n                />\n                <FormErrorMessage>{form.errors.email}</FormErrorMessage>\n              </FormControl>\n            )}\n          </Field>\n          <Field name=\"password\">\n            {({ field, form }) => (\n              <FormControl\n                isInvalid={form.errors.password && form.touched.password}\n              >\n                <FormLabel mt={3} mb={2}>\n                  Password\n                </FormLabel>\n                <Input\n                  {...field}\n                  width=\"300px\"\n                  type=\"password\"\n                  focusBorderColor=\"black\"\n                  borderRadius=\"0\"\n                />\n                <FormErrorMessage>{form.errors.password}</FormErrorMessage>\n              </FormControl>\n            )}\n          </Field>\n          <Button\n            mt=\"30px\"\n            borderRadius=\"0\"\n            bg=\"transparent\"\n            size=\"sm\"\n            border=\"1px solid #000000\"\n            _hover={{ bg: '#606060', color: 'white' }}\n            _active={{\n              bg: '#000000',\n              transform: 'scale(0.98)',\n            }}\n            type=\"submit\"\n          >\n            Register\n          </Button>\n        </Form>\n      </Formik>\n    </Center>\n  );\n};\n","import { Helmet } from 'react-helmet-async';\nimport { RegisterForm } from 'components/RegisterForm/RegisterForm';\n\nexport default function Register() {\n  return (\n    <div>\n      <Helmet>\n        <title>Registration</title>\n      </Helmet>\n      <RegisterForm />\n    </div>\n  );\n}\n"],"names":["RegisterForm","dispatch","useDispatch","w","p","initialValues","userName","email","password","validationSchema","Yup","required","min","onSubmit","setSubmitting","setTimeout","registration","name","field","form","isInvalid","errors","touched","mb","placeholder","width","type","focusBorderColor","borderRadius","mt","bg","size","border","_hover","color","_active","transform","Register"],"sourceRoot":""}